name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Selection of the target endpoint'
        type: environment
        default: 'sandbox'
        required: true

jobs:
  setenv:
    name: Set environment variables
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs: 
      installationId: ${{ steps.setenv.outputs.installationId }}
      environment: ${{ steps.setenv.outputs.environment }}
    steps:
      - name: Set environment variables
        id: setenv
        run: |
          echo "Installation ID: ${{ vars.INSTALLATION_ID }}" 
          echo "installationId=${{ vars.INSTALLATION_ID }}" >> $GITHUB_OUTPUT
  
  deploy:
    name: Deploy
    needs:
      - setenv
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}
      cancel-in-progress: true
    uses: ./.github/workflows/deploy-azure-container-app.yml
    secrets: inherit 
    permissions:
      id-token: write
      packages: read
      actions: write
    with:
      environment: ${{ inputs.environment }}
  
  test:
    needs:
      - setenv
      - deploy
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: GetToken
        id: getToken
        uses: helaili/github-oidc-auth@main
        with:
          installationId: ${{ vars.INSTALLATION_ID }}
          endpoint: ${{ vars.ENDPOINT }}
      - name: Use the token from the output
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.getToken.outputs.scopedToken }}
          script: |
            github.rest.repos.get({
              owner: 'carbonhub',
              repo: 'website'
            }).then((response) => {
              if(!response.data.full_name) {
                core.setFailed(`Failed to access repo carbonhub/website. Response was ${response}`);
              } else {
                console.log('Successfully accessed repo carbonhub/website');
              }
            }).catch((error) => {
              core.setFailed(`Failed to access repo. Error was ${error}`);
            })
