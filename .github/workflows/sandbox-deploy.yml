name: Sandbox Deploy

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'docker image tag'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - latest
          - nightly
  release:
    types: [released]
   

jobs:
  resolve-tag: 
    runs-on: ubuntu-latest
    outputs: 
      tag: ${{ steps.resolve-tag.outputs.tag }}
    steps:
      - id: resolve-tag
        run: |
          if [  ${{ github.event_name }} == "release" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else 
            echo "tag=${{ github.event.inputs.tag  }}" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy
    needs: resolve-tag
    concurrency:
      group: sandbox
      cancel-in-progress: true
    uses: ./.github/workflows/deploy-azure-container-app.yml
    secrets: inherit 
    permissions:
      id-token: write
      packages: read
      actions: write
    with:
      environment: sandbox
      tag: ${{ needs.resolve-tag.outputs.tag }}
  
  test:
    needs:
      - deploy
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    environment:  sandbox
    steps:
      - name: GetToken
        id: getToken
        uses: helaili/github-oidc-auth@main
        with:
          login: ${{ vars.LOGIN }}
          endpoint: ${{ vars.ENDPOINT }}
      - name: Use the token from the output
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.getToken.outputs.scopedToken }}
          script: |
            github.rest.repos.get({
              owner: '${{ vars.TEST_ORG }}',
              repo: '${{ vars.TEST_REPO }}'
            }).then((response) => {
              if(!response.data.full_name) {
                core.setFailed(`Failed to access repo ${{ vars.TEST_ORG }}/${{ vars.TEST_REPO }}. Response was ${response}`);
              } else {
                console.log('Successfully accessed repo ${{ vars.TEST_ORG }}/${{ vars.TEST_REPO }}');
              }
            }).catch((error) => {
              core.setFailed(`Failed to access repo. Error was ${error}`);
            })
