name: Test Workflow

on:
  workflow_call:
    inputs:
      login:
        description: 'Owner of the resource to access'
        type: string
        required: true
      endpoint:
        description: 'Endpoint to use'
        type: string
        required: true
      environment:
        description: 'Environment to use'
        type: string
        required: true
  
jobs:
  should-work-with-curl:
    runs-on: ubuntu-latest
    environment:  ${{ inputs.environment }}
    permissions:
      id-token: write
    steps:
      - name: Get OIDC token and set OIDC_TOKEN environment variable
        run: |
          echo "OIDC_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" -H "Accept: application/json; api-version=2.0" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://ActionsOIDCGateway" | jq -r ".value")"  >> $GITHUB_ENV
      - name: Retrieving the token 
        run: |
          echo "SCOPED_TOKEN=$(curl --header "Content-Type: application/json" --request POST  --data '{"oidcToken":"${{ env.OIDC_TOKEN }}","login":"${{ inputs.login }}"}' ${{ inputs.endpoint }} | jq -r ".scopedToken")" >> $GITHUB_ENV
      - name: Check the token 
        run: |
          if [ -n "$SCOPED_TOKEN" ]; then
            echo "Sweet succsess!"
          else
            echo "::error title=Failed to get token::Empty token, something went wrong"
            exit 0
          fi
      - name: Use the token
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.SCOPED_TOKEN }}
          script: |
            github.rest.repos.get({
              owner: '${{ vars.TEST_ORG }}',
              repo: '${{ vars.TEST_REPO }}'
            }).then((response) => {
              if(!response.data.full_name) {
                core.setFailed(`Failed to access repo ${{ vars.TEST_ORG }}/${{ vars.TEST_REPO }}. Response was ${response}`);
              } else {
                console.log('Successfully accessed repo ${{ vars.TEST_ORG }}/${{ vars.TEST_REPO }}');
              }
            }).catch((error) => {
              core.setFailed(`Failed to access repo. Error was ${error}`);
            })

            // Let's try to access a repo we should not have access to with this token
            github.rest.repos.get({
              owner: 'octodemo',
              repo: '.github-private'
            }).then((response) => {
              if(response.data.full_name) {
                core.setFailed('We should not be able to access this repo, that is not expected');
              }
            }).catch((error) => {
              console.log('We should not be able to access octodemo/.github-private, this is expected')
            })

  should-work-with-action:
    runs-on: ubuntu-latest
    environment:  ${{ inputs.environment }}
    permissions:
      id-token: write
    steps:
      - name: GetToken
        id: getToken
        uses: helaili/github-oidc-auth@main
        with:
          login: ${{ inputs.login }}
          endpoint: ${{ inputs.endpoint }}
      - name: Use the token for repo access
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.SCOPED_TOKEN }}
          script: |
            github.rest.repos.get({
              owner: '${{ vars.TEST_ORG }}',
              repo: '${{ vars.TEST_REPO }}'
            }).then((response) => {
              if(!response.data.full_name) {
                core.setFailed(`Failed to access repo ${{ vars.TEST_ORG }}/${{ vars.TEST_REPO }}. Response was ${response}`);
              } else {
                console.log('Successfully accessed repo ${{ vars.TEST_ORG }}/${{ vars.TEST_REPO }}');
              }
            }).catch((error) => {
              core.setFailed(`Failed to access repo. Error was ${error}`);
            })

            // Let's try to access a repo we should not have access to with this token
            github.rest.repos.get({
              owner: 'octodemo',
              repo: '.github-private'
            }).then((response) => {
              if(response.data.full_name) {
                core.setFailed('We should not be able to access this repo, that is not expected');
              }
            }).catch((error) => {
              console.log('We should not be able to access octodemo/.github-private, this is expected')
            })

      - name: Use the token for repo access
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.SCOPED_TOKEN }}
          script: |
            github.rest.repos.get({
              owner: '${{ vars.TEST_ORG }}',
              repo: '${{ vars.TEST_REPO }}'
            }).then((response) => {
              if(!response.data.full_name) {
                core.setFailed(`Failed to access repo ${{ vars.TEST_ORG }}/${{ vars.TEST_REPO }}. Response was ${response}`);
              } else {
                console.log('Successfully accessed repo ${{ vars.TEST_ORG }}/${{ vars.TEST_REPO }}');
              }
            }).catch((error) => {
              core.setFailed(`Failed to access repo. Error was ${error}`);
            })

            // Let's try to access a repo we should not have access to with this token
            github.rest.repos.get({
              owner: 'octodemo',
              repo: '.github-private'
            }).then((response) => {
              if(response.data.full_name) {
                core.setFailed('We should not be able to access this repo, that is not expected');
              }
            }).catch((error) => {
              console.log('We should not be able to access octodemo/.github-private, this is expected')
            })
  
      - name: Use the token for org access
        uses: actions/github-script@v6
        if: ${{ inputs.environment == 'production' }}
        with:
          github-token: ${{ env.SCOPED_TOKEN }}
          script: |
            github.rest.orgs.listAppInstallations({
              org: '${{ vars.TEST_ORG }}'
            }).then((response) => {
              if(!response.data) {
                core.setFailed(`Failed to access org ${{ vars.TEST_ORG }}. Response was ${response}`);
              } else {
                if (response.data.length == 0) {
                  core.setFailed(`No app found in org ${{ vars.TEST_ORG }}. Response was ${response}`);
                } else {
                  console.log('Successfully accessed org ${{ vars.TEST_ORG }}');
                }
                console.log(response.data);
                for(const app of response.data) {
                  console.log(app.name);
                }
              }
            }).catch((error) => {
              core.setFailed(`Failed to access repo. Error was ${error}`);
            })

  no-configured-entitlement:
    # There is no matching entitlement config in our test data so this should fail to retrieve a token
    runs-on: ubuntu-latest
    environment: test
    permissions:
      id-token: write
    steps:
      - name: Get OIDC token and set OIDC_TOKEN environment variable
        run: |
          echo "OIDC_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" -H "Accept: application/json; api-version=2.0" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://ActionsOIDCGateway" | jq -r ".value")"  >> $GITHUB_ENV
      - name: Retrieving the token 
        run: |
          echo "SCOPED_TOKEN=$(curl --header "Content-Type: application/json" --request POST  --data '{"oidcToken":"${{ env.OIDC_TOKEN }}","login":"${{ inputs.login }}"}' ${{ inputs.endpoint }} | jq -r ".scopedToken")" >> $GITHUB_ENV
      - name: Check the token 
        run: |
          if [ -n "$SCOPED_TOKEN" ]; then
            echo "::error title=Failure::Token should have been empty, something went wrong"
            exit 0
          else
            echo "Sweet succsess!"
          fi
  
  config-exceed-entitlement:
    # The config provides more scopes than what the app is configured to provide
    runs-on: ubuntu-latest
    environment: hell
    permissions:
      id-token: write
    steps:
      - name: Get OIDC token and set OIDC_TOKEN environment variable
        run: |
          echo "OIDC_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" -H "Accept: application/json; api-version=2.0" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://ActionsOIDCGateway" | jq -r ".value")"  >> $GITHUB_ENV
      - name: Retrieving the token 
        run: |
          echo "SCOPED_TOKEN=$(curl --header "Content-Type: application/json" --request POST  --data '{"oidcToken":"${{ env.OIDC_TOKEN }}","login":"${{ inputs.login }}"}' ${{ inputs.endpoint }} | jq -r ".scopedToken")" >> $GITHUB_ENV
      - name: Check the token 
        run: |
          if [ -n "$SCOPED_TOKEN" ]; then
            echo "::error title=Failure::Token should have been empty, something went wrong"
            exit 0
          else
            echo "Sweet succsess!"
          fi